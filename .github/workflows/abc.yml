name: deploy
# **What it does**: On git push to release branch, it deploys release branch code to QA environment both for Sitecore CMS and Vercel.
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        #required: true
        description: "Deployment Environment"
        options:
          - Dev
      GitBranch:
        type: choice
        #required: true
        description: "Git Branch"
        options:
          - main
      DeployToXMCloud:
        description: "Deploy to XM Cloud"
        type: boolean
        default: true
        required: true
      DeployToVercelFirstalert:
        description: "Deploy to Vercel Firstalert"
        type: boolean
        default: true
        required: true
      DeployToVercelProStore:
        description: "Deploy to Vercel Pro-Store"
        type: boolean
        default: true
        required: true

env:
  environment: ${{ inputs.Environment }}
  GitBranch: ${{ inputs.GitBranch }}
  DeployToXMCloud: ${{ inputs.DeployToXMCloud }}
  DeployToVercelFirstalert: ${{ inputs.DeployToVercelFirstalert }}
  DeployToVercelProStore: ${{ inputs.DeployToVercelProStore }}

permissions:
  contents: read

jobs:
  Collect-Deployment-Data:
    name: Basic echo
    runs-on: ubuntu-latest
    outputs:
      Deploytoxmcloud: ${{ steps.check_files.outputs.Deploytoxmcloud }}
      Deploytofirstalert: ${{ steps.check_files.outputs.Deploytofirstalert }}
      Deploytoprostore: ${{ steps.check_files.outputs.Deploytoprostore }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GitBranch }}
          fetch-depth: 0
      
      - name: "Get Current Date"
        id: today
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Use Date Output
        run: echo "The current date is ${{ steps.today.outputs.date }}"

      - name: Define Paths Array
        id: define_paths
        run: |
          echo "cmspaths=src/items;src/platform;src/*.json" >> $GITHUB_ENV
          echo "firstalertpaths=src/projects" >> $GITHUB_ENV
          echo "prostorepath=src/prostore" >> $GITHUB_ENV

      - name: Check Modified Files
        id: check_files
        run: |
          echo "=============== list modified files ==============="

          git diff --name-only HEAD^ HEAD > files.txt
          Deploytoxmcloud='false'
          DeploytoFirstalert='false'
          DeploytoProstore='false'

          while IFS= read -r file
          do
            echo "$file"
          done < files.txt

          echo "========XMCLOUD file check=========="
          
          while IFS= read -r file
          do
            IFS=';' read -r -a cmspaths_array <<< "$cmspaths"
            for path in "${cmspaths_array[@]}"; do
              if [[ "$file" == $path/* || "$file" == $path  ]]; then
                Deploytoxmcloud='true'
                break
              fi
            done
          done < files.txt
          echo "Deploytoxmcloud=$Deploytoxmcloud" >> $GITHUB_ENV
          echo "::set-output name=Deploytoxmcloud::$Deploytoxmcloud"

          echo "========FirstAlert file check=========="

          while IFS= read -r file
          do
            IFS=';' read -r -a firstalertpaths_array <<< "$firstalertpaths"
            for path in "${firstalertpaths_array[@]}"; do
              if [[ "$file" == $path/* || "$file" == $path ]]; then
                DeploytoFirstalert='true'
                break
              fi
            done
          done < files.txt
          echo "DeploytoFirstalert=$DeploytoFirstalert" >> $GITHUB_ENV
          echo "::set-output name=DeploytoFirstalert::$DeploytoFirstalert"

          echo "========Prostore file check=========="

          while IFS= read -r file
          do
            IFS=';' read -r -a firstalertpaths_array <<< "$prostorepath"
            for path in "${firstalertpaths_array[@]}"; do
              if [[ "$file" == $path/* || "$file" == $path ]]; then
                DeploytoProstore='true'
                break
              fi
            done
          done < files.txt
          echo "DeploytoProstore=$DeploytoProstore" >> $GITHUB_ENV
          echo "::set-output name=DeploytoProstore::$DeploytoProstore"

      - name: Output Deployment Decision
        run: |
          echo "Deploytoxmcloud = ${{ env.Deploytoxmcloud }}"
          echo "DeploytoFirstalert = ${{ env.DeploytoFirstalert }}"
          echo "DeploytoProstore = ${{ env.DeploytoProstore }}"

  XMCLOUD:
    name: XMCLOUD
    runs-on: ubuntu-latest
    needs : [Collect-Deployment-Data]
    if: |
      always() && ((( github.event_name == 'push')&&( needs.Collect-Deployment-Data.outputs.Deploytoxmcloud == 'true' ) && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped')) || ( github.event_name == 'workflow_dispatch') && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped') && (github.event.inputs.DeployToXMCloud == 'true'))
 
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GitBranch }}
          fetch-depth: 0

      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: "Get Current Date"
        id: today
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Use Date Output
        run: echo "The current date is ${{ steps.today.outputs.date }}"

  FIRSTALERT:
    name: FIRSTALERT
    runs-on: ubuntu-latest
    needs : [Collect-Deployment-Data , XMCLOUD]
    if: |
      always() && ((( github.event_name == 'push') &&( needs.Collect-Deployment-Data.outputs.Deploytofirstalert == 'true' ) && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped') && (needs.XMCLOUD.result == 'success' || needs.XMCLOUD.result == 'skipped')) || ( github.event_name == 'workflow_dispatch') && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped') && (needs.XMCLOUD.result == 'success' || needs.XMCLOUD.result == 'skipped') && (github.event.inputs.DeployToVercelFirstalert == 'true'))
  
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GitBranch }}
          fetch-depth: 0

      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: "Get Current Date"
        id: today
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Use Date Output
        run: echo "The current date is ${{ steps.today.outputs.date }}"
        
  PROSTORE:
    name: PROSTORE
    runs-on: ubuntu-latest
    needs : [Collect-Deployment-Data , XMCLOUD]
    if: |
      always() && ((( github.event_name == 'push')&&( needs.Collect-Deployment-Data.outputs.Deploytoprostore == 'true' ) && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped')&& (needs.XMCLOUD.result == 'success' || needs.XMCLOUD.result == 'skipped')) || (( github.event_name == 'workflow_dispatch') && (needs.Collect-Deployment-Data.result == 'success' || needs.Collect-Deployment-Data.result == 'skipped') && (needs.XMCLOUD.result == 'success' || needs.XMCLOUD.result == 'skipped') && (github.event.inputs.DeployToVercelProStore == 'true')))
  
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GitBranch }}
          fetch-depth: 0

      - name: Install Vercel CLI
        run: npm install --global vercel@canary
      - name: "Get Current Date"
        id: today
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Use Date Output
        run: echo "The current date is ${{ steps.today.outputs.date }}"

